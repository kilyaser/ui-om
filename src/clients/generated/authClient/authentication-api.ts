/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * order-manager
 * API order-manager
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  AuthRequest,
  AuthResponse,
  OmUser,
  RegisterRequest
} from './models'
import { apiInstance } from '../../../shared/api/instance';
import type { BodyType } from '../../../shared/api/instance';




/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
export const register = (
    registerRequest: BodyType<RegisterRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<OmUser>(
      {url: `/api/v1/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerRequest, signal
    },
      );
    }
  


export const getRegisterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof register>>, TError,{data: BodyType<RegisterRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof register>>, TError,{data: BodyType<RegisterRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof register>>, {data: BodyType<RegisterRequest>}> = (props) => {
          const {data} = props ?? {};

          return  register(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterMutationResult = NonNullable<Awaited<ReturnType<typeof register>>>
    export type RegisterMutationBody = BodyType<RegisterRequest>
    export type RegisterMutationError = unknown

    export const useRegister = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof register>>, TError,{data: BodyType<RegisterRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof register>>,
        TError,
        {data: BodyType<RegisterRequest>},
        TContext
      > => {

      const mutationOptions = getRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
export const authenticate = (
    authRequest: BodyType<AuthRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<AuthResponse>(
      {url: `/api/v1/auth/authenticate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authRequest, signal
    },
      );
    }
  


export const getAuthenticateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticate>>, TError,{data: BodyType<AuthRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authenticate>>, TError,{data: BodyType<AuthRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authenticate>>, {data: BodyType<AuthRequest>}> = (props) => {
          const {data} = props ?? {};

          return  authenticate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthenticateMutationResult = NonNullable<Awaited<ReturnType<typeof authenticate>>>
    export type AuthenticateMutationBody = BodyType<AuthRequest>
    export type AuthenticateMutationError = unknown

    export const useAuthenticate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticate>>, TError,{data: BodyType<AuthRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof authenticate>>,
        TError,
        {data: BodyType<AuthRequest>},
        TContext
      > => {

      const mutationOptions = getAuthenticateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞.
 */
export const refreshToken = (
    
 signal?: AbortSignal
) => {
      
      
      return apiInstance<AuthResponse>(
      {url: `/api/v1/auth/refresh-token`, method: 'GET', signal
    },
      );
    }
  

export const getRefreshTokenQueryKey = () => {
    return [`/api/v1/auth/refresh-token`] as const;
    }

    
export const getRefreshTokenQueryOptions = <TData = Awaited<ReturnType<typeof refreshToken>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof refreshToken>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRefreshTokenQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof refreshToken>>> = ({ signal }) => refreshToken(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof refreshToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type RefreshTokenQueryResult = NonNullable<Awaited<ReturnType<typeof refreshToken>>>
export type RefreshTokenQueryError = unknown


export function useRefreshToken<TData = Awaited<ReturnType<typeof refreshToken>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof refreshToken>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof refreshToken>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useRefreshToken<TData = Awaited<ReturnType<typeof refreshToken>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof refreshToken>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof refreshToken>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useRefreshToken<TData = Awaited<ReturnType<typeof refreshToken>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof refreshToken>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useRefreshToken<TData = Awaited<ReturnType<typeof refreshToken>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof refreshToken>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getRefreshTokenQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getRefreshTokenSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof refreshToken>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof refreshToken>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRefreshTokenQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof refreshToken>>> = ({ signal }) => refreshToken(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof refreshToken>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type RefreshTokenSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof refreshToken>>>
export type RefreshTokenSuspenseQueryError = unknown


export function useRefreshTokenSuspense<TData = Awaited<ReturnType<typeof refreshToken>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof refreshToken>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useRefreshTokenSuspense<TData = Awaited<ReturnType<typeof refreshToken>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof refreshToken>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useRefreshTokenSuspense<TData = Awaited<ReturnType<typeof refreshToken>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof refreshToken>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useRefreshTokenSuspense<TData = Awaited<ReturnType<typeof refreshToken>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof refreshToken>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getRefreshTokenSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



