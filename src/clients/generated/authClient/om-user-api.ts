/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * order-manager
 * API order-manager
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  OmUser,
  PasswordUpdateRequest,
  UpdateOmUserRequest
} from './models'
import { apiInstance } from '../../../shared/api/instance';
import type { BodyType } from '../../../shared/api/instance';




/**
 * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è.
 */
export const changePassword = (
    passwordUpdateRequest: BodyType<PasswordUpdateRequest>,
 ) => {
      
      
      return apiInstance<string>(
      {url: `/api/v1/users/password`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: passwordUpdateRequest
    },
      );
    }
  


export const getChangePasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changePassword>>, TError,{data: BodyType<PasswordUpdateRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof changePassword>>, TError,{data: BodyType<PasswordUpdateRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changePassword>>, {data: BodyType<PasswordUpdateRequest>}> = (props) => {
          const {data} = props ?? {};

          return  changePassword(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof changePassword>>>
    export type ChangePasswordMutationBody = BodyType<PasswordUpdateRequest>
    export type ChangePasswordMutationError = unknown

    export const useChangePassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changePassword>>, TError,{data: BodyType<PasswordUpdateRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof changePassword>>,
        TError,
        {data: BodyType<PasswordUpdateRequest>},
        TContext
      > => {

      const mutationOptions = getChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const changeOmUser = (
    updateOmUserRequest: BodyType<UpdateOmUserRequest>,
 ) => {
      
      
      return apiInstance<OmUser>(
      {url: `/api/v1/users/change`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateOmUserRequest
    },
      );
    }
  


export const getChangeOmUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeOmUser>>, TError,{data: BodyType<UpdateOmUserRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof changeOmUser>>, TError,{data: BodyType<UpdateOmUserRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeOmUser>>, {data: BodyType<UpdateOmUserRequest>}> = (props) => {
          const {data} = props ?? {};

          return  changeOmUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangeOmUserMutationResult = NonNullable<Awaited<ReturnType<typeof changeOmUser>>>
    export type ChangeOmUserMutationBody = BodyType<UpdateOmUserRequest>
    export type ChangeOmUserMutationError = unknown

    export const useChangeOmUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeOmUser>>, TError,{data: BodyType<UpdateOmUserRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof changeOmUser>>,
        TError,
        {data: BodyType<UpdateOmUserRequest>},
        TContext
      > => {

      const mutationOptions = getChangeOmUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getOmUser = (
    userId: string,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<OmUser>(
      {url: `/api/v1/users/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetOmUserQueryKey = (userId: string,) => {
    return [`/api/v1/users/${userId}`] as const;
    }

    
export const getGetOmUserQueryOptions = <TData = Awaited<ReturnType<typeof getOmUser>>, TError = unknown>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOmUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOmUserQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOmUser>>> = ({ signal }) => getOmUser(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOmUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOmUserQueryResult = NonNullable<Awaited<ReturnType<typeof getOmUser>>>
export type GetOmUserQueryError = unknown


export function useGetOmUser<TData = Awaited<ReturnType<typeof getOmUser>>, TError = unknown>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOmUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOmUser>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOmUser<TData = Awaited<ReturnType<typeof getOmUser>>, TError = unknown>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOmUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOmUser>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOmUser<TData = Awaited<ReturnType<typeof getOmUser>>, TError = unknown>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOmUser>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetOmUser<TData = Awaited<ReturnType<typeof getOmUser>>, TError = unknown>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOmUser>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOmUserQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetOmUserSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getOmUser>>, TError = unknown>(userId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOmUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOmUserQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOmUser>>> = ({ signal }) => getOmUser(userId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOmUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOmUserSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getOmUser>>>
export type GetOmUserSuspenseQueryError = unknown


export function useGetOmUserSuspense<TData = Awaited<ReturnType<typeof getOmUser>>, TError = unknown>(
 userId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOmUser>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOmUserSuspense<TData = Awaited<ReturnType<typeof getOmUser>>, TError = unknown>(
 userId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOmUser>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOmUserSuspense<TData = Awaited<ReturnType<typeof getOmUser>>, TError = unknown>(
 userId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOmUser>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetOmUserSuspense<TData = Awaited<ReturnType<typeof getOmUser>>, TError = unknown>(
 userId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOmUser>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOmUserSuspenseQueryOptions(userId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



