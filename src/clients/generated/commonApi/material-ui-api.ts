/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * order-manager
 * API order-manager
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  CreateMaterialRequest,
  UiMaterial
} from './models'
import { apiInstance } from '../../../shared/api/instance';
import type { BodyType } from '../../../shared/api/instance';




/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.
 */
export const createMaterial = (
    createMaterialRequest: BodyType<CreateMaterialRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiMaterial>(
      {url: `/api/v1/ui/materials`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createMaterialRequest, signal
    },
      );
    }
  


export const getCreateMaterialMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMaterial>>, TError,{data: BodyType<CreateMaterialRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createMaterial>>, TError,{data: BodyType<CreateMaterialRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createMaterial>>, {data: BodyType<CreateMaterialRequest>}> = (props) => {
          const {data} = props ?? {};

          return  createMaterial(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateMaterialMutationResult = NonNullable<Awaited<ReturnType<typeof createMaterial>>>
    export type CreateMaterialMutationBody = BodyType<CreateMaterialRequest>
    export type CreateMaterialMutationError = unknown

    export const useCreateMaterial = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createMaterial>>, TError,{data: BodyType<CreateMaterialRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createMaterial>>,
        TError,
        {data: BodyType<CreateMaterialRequest>},
        TContext
      > => {

      const mutationOptions = getCreateMaterialMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ id
 */
export const getMaterialById = (
    materialId: string,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiMaterial>(
      {url: `/api/v1/ui/materials/${materialId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetMaterialByIdQueryKey = (materialId: string,) => {
    return [`/api/v1/ui/materials/${materialId}`] as const;
    }

    
export const getGetMaterialByIdQueryOptions = <TData = Awaited<ReturnType<typeof getMaterialById>>, TError = unknown>(materialId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMaterialById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMaterialByIdQueryKey(materialId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMaterialById>>> = ({ signal }) => getMaterialById(materialId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(materialId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMaterialById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMaterialByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMaterialById>>>
export type GetMaterialByIdQueryError = unknown


export function useGetMaterialById<TData = Awaited<ReturnType<typeof getMaterialById>>, TError = unknown>(
 materialId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMaterialById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMaterialById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMaterialById<TData = Awaited<ReturnType<typeof getMaterialById>>, TError = unknown>(
 materialId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMaterialById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMaterialById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMaterialById<TData = Awaited<ReturnType<typeof getMaterialById>>, TError = unknown>(
 materialId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMaterialById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetMaterialById<TData = Awaited<ReturnType<typeof getMaterialById>>, TError = unknown>(
 materialId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMaterialById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMaterialByIdQueryOptions(materialId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetMaterialByIdSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getMaterialById>>, TError = unknown>(materialId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getMaterialById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMaterialByIdQueryKey(materialId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMaterialById>>> = ({ signal }) => getMaterialById(materialId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getMaterialById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMaterialByIdSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getMaterialById>>>
export type GetMaterialByIdSuspenseQueryError = unknown


export function useGetMaterialByIdSuspense<TData = Awaited<ReturnType<typeof getMaterialById>>, TError = unknown>(
 materialId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getMaterialById>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMaterialByIdSuspense<TData = Awaited<ReturnType<typeof getMaterialById>>, TError = unknown>(
 materialId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getMaterialById>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMaterialByIdSuspense<TData = Awaited<ReturnType<typeof getMaterialById>>, TError = unknown>(
 materialId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getMaterialById>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetMaterialByIdSuspense<TData = Awaited<ReturnType<typeof getMaterialById>>, TError = unknown>(
 materialId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getMaterialById>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMaterialByIdSuspenseQueryOptions(materialId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



