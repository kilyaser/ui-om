/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * order-manager
 * API order-manager
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  AddOrderItemsRequest,
  DeleteOrderItemRequest,
  UiOrder,
  UpdateOrderItemRequest
} from './models'
import { apiInstance } from '../../../shared/api/instance';
import type { BodyType } from '../../../shared/api/instance';




/**
 * Обновить позиции заказа
 */
export const updateOrderItems = (
    updateOrderItemRequest: BodyType<UpdateOrderItemRequest>,
 ) => {
      
      
      return apiInstance<UiOrder>(
      {url: `/api/v1/ui/items`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateOrderItemRequest
    },
      );
    }
  


export const getUpdateOrderItemsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrderItems>>, TError,{data: BodyType<UpdateOrderItemRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateOrderItems>>, TError,{data: BodyType<UpdateOrderItemRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOrderItems>>, {data: BodyType<UpdateOrderItemRequest>}> = (props) => {
          const {data} = props ?? {};

          return  updateOrderItems(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateOrderItemsMutationResult = NonNullable<Awaited<ReturnType<typeof updateOrderItems>>>
    export type UpdateOrderItemsMutationBody = BodyType<UpdateOrderItemRequest>
    export type UpdateOrderItemsMutationError = unknown

    export const useUpdateOrderItems = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrderItems>>, TError,{data: BodyType<UpdateOrderItemRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateOrderItems>>,
        TError,
        {data: BodyType<UpdateOrderItemRequest>},
        TContext
      > => {

      const mutationOptions = getUpdateOrderItemsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Добавить позиции в зказа
 */
export const addOrderItems = (
    addOrderItemsRequest: BodyType<AddOrderItemsRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiOrder>(
      {url: `/api/v1/ui/items`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addOrderItemsRequest, signal
    },
      );
    }
  


export const getAddOrderItemsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrderItems>>, TError,{data: BodyType<AddOrderItemsRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof addOrderItems>>, TError,{data: BodyType<AddOrderItemsRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrderItems>>, {data: BodyType<AddOrderItemsRequest>}> = (props) => {
          const {data} = props ?? {};

          return  addOrderItems(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddOrderItemsMutationResult = NonNullable<Awaited<ReturnType<typeof addOrderItems>>>
    export type AddOrderItemsMutationBody = BodyType<AddOrderItemsRequest>
    export type AddOrderItemsMutationError = unknown

    export const useAddOrderItems = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrderItems>>, TError,{data: BodyType<AddOrderItemsRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof addOrderItems>>,
        TError,
        {data: BodyType<AddOrderItemsRequest>},
        TContext
      > => {

      const mutationOptions = getAddOrderItemsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Удалить позицию заказа
 */
export const deleteOrderItems = (
    deleteOrderItemRequest: BodyType<DeleteOrderItemRequest>,
 ) => {
      
      
      return apiInstance<UiOrder>(
      {url: `/api/v1/ui/items`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: deleteOrderItemRequest
    },
      );
    }
  


export const getDeleteOrderItemsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderItems>>, TError,{data: BodyType<DeleteOrderItemRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrderItems>>, TError,{data: BodyType<DeleteOrderItemRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrderItems>>, {data: BodyType<DeleteOrderItemRequest>}> = (props) => {
          const {data} = props ?? {};

          return  deleteOrderItems(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrderItemsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrderItems>>>
    export type DeleteOrderItemsMutationBody = BodyType<DeleteOrderItemRequest>
    export type DeleteOrderItemsMutationError = unknown

    export const useDeleteOrderItems = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderItems>>, TError,{data: BodyType<DeleteOrderItemRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrderItems>>,
        TError,
        {data: BodyType<DeleteOrderItemRequest>},
        TContext
      > => {

      const mutationOptions = getDeleteOrderItemsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    