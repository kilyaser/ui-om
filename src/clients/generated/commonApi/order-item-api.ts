/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * order-manager
 * API order-manager
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  AddOrderItemsRequest,
  DeleteOrderItemRequest,
  UiEstablishMachineRequest,
  UiOrderItem,
  UiOrderItems,
  UpdateOrderItemRequest
} from './models'
import { apiInstance } from '../../../shared/api/instance';
import type { BodyType } from '../../../shared/api/instance';




/**
 * Обновить позиции заказа
 */
export const updateOrderItems = (
    updateOrderItemRequest: BodyType<UpdateOrderItemRequest>,
 ) => {
      
      
      return apiInstance<UiOrderItems>(
      {url: `/api/v1/ui/items`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateOrderItemRequest
    },
      );
    }
  


export const getUpdateOrderItemsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrderItems>>, TError,{data: BodyType<UpdateOrderItemRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateOrderItems>>, TError,{data: BodyType<UpdateOrderItemRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOrderItems>>, {data: BodyType<UpdateOrderItemRequest>}> = (props) => {
          const {data} = props ?? {};

          return  updateOrderItems(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateOrderItemsMutationResult = NonNullable<Awaited<ReturnType<typeof updateOrderItems>>>
    export type UpdateOrderItemsMutationBody = BodyType<UpdateOrderItemRequest>
    export type UpdateOrderItemsMutationError = unknown

    export const useUpdateOrderItems = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrderItems>>, TError,{data: BodyType<UpdateOrderItemRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateOrderItems>>,
        TError,
        {data: BodyType<UpdateOrderItemRequest>},
        TContext
      > => {

      const mutationOptions = getUpdateOrderItemsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Добавить позиции в зказа
 */
export const addOrderItems = (
    addOrderItemsRequest: BodyType<AddOrderItemsRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiOrderItems>(
      {url: `/api/v1/ui/items`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addOrderItemsRequest, signal
    },
      );
    }
  


export const getAddOrderItemsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrderItems>>, TError,{data: BodyType<AddOrderItemsRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof addOrderItems>>, TError,{data: BodyType<AddOrderItemsRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrderItems>>, {data: BodyType<AddOrderItemsRequest>}> = (props) => {
          const {data} = props ?? {};

          return  addOrderItems(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddOrderItemsMutationResult = NonNullable<Awaited<ReturnType<typeof addOrderItems>>>
    export type AddOrderItemsMutationBody = BodyType<AddOrderItemsRequest>
    export type AddOrderItemsMutationError = unknown

    export const useAddOrderItems = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrderItems>>, TError,{data: BodyType<AddOrderItemsRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof addOrderItems>>,
        TError,
        {data: BodyType<AddOrderItemsRequest>},
        TContext
      > => {

      const mutationOptions = getAddOrderItemsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Удалить позицию заказа
 */
export const deleteOrderItems = (
    deleteOrderItemRequest: BodyType<DeleteOrderItemRequest>,
 ) => {
      
      
      return apiInstance<void>(
      {url: `/api/v1/ui/items`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: deleteOrderItemRequest
    },
      );
    }
  


export const getDeleteOrderItemsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderItems>>, TError,{data: BodyType<DeleteOrderItemRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrderItems>>, TError,{data: BodyType<DeleteOrderItemRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrderItems>>, {data: BodyType<DeleteOrderItemRequest>}> = (props) => {
          const {data} = props ?? {};

          return  deleteOrderItems(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrderItemsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrderItems>>>
    export type DeleteOrderItemsMutationBody = BodyType<DeleteOrderItemRequest>
    export type DeleteOrderItemsMutationError = unknown

    export const useDeleteOrderItems = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderItems>>, TError,{data: BodyType<DeleteOrderItemRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrderItems>>,
        TError,
        {data: BodyType<DeleteOrderItemRequest>},
        TContext
      > => {

      const mutationOptions = getDeleteOrderItemsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Назначит станок на позицию заказа для производства
 */
export const establishMachines = (
    uiEstablishMachineRequest: BodyType<UiEstablishMachineRequest>,
 ) => {
      
      
      return apiInstance<UiOrderItem>(
      {url: `/api/v1/ui/items/machine/establish`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: uiEstablishMachineRequest
    },
      );
    }
  


export const getEstablishMachinesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof establishMachines>>, TError,{data: BodyType<UiEstablishMachineRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof establishMachines>>, TError,{data: BodyType<UiEstablishMachineRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof establishMachines>>, {data: BodyType<UiEstablishMachineRequest>}> = (props) => {
          const {data} = props ?? {};

          return  establishMachines(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EstablishMachinesMutationResult = NonNullable<Awaited<ReturnType<typeof establishMachines>>>
    export type EstablishMachinesMutationBody = BodyType<UiEstablishMachineRequest>
    export type EstablishMachinesMutationError = unknown

    export const useEstablishMachines = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof establishMachines>>, TError,{data: BodyType<UiEstablishMachineRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof establishMachines>>,
        TError,
        {data: BodyType<UiEstablishMachineRequest>},
        TContext
      > => {

      const mutationOptions = getEstablishMachinesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const findById = (
    itemId: string,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiOrderItem>(
      {url: `/api/v1/ui/items/${itemId}`, method: 'GET', signal
    },
      );
    }
  

export const getFindByIdQueryKey = (itemId: string,) => {
    return [`/api/v1/ui/items/${itemId}`] as const;
    }

    
export const getFindByIdQueryOptions = <TData = Awaited<ReturnType<typeof findById>>, TError = unknown>(itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByIdQueryKey(itemId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findById>>> = ({ signal }) => findById(itemId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(itemId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type FindByIdQueryResult = NonNullable<Awaited<ReturnType<typeof findById>>>
export type FindByIdQueryError = unknown


export function useFindById<TData = Awaited<ReturnType<typeof findById>>, TError = unknown>(
 itemId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindById<TData = Awaited<ReturnType<typeof findById>>, TError = unknown>(
 itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindById<TData = Awaited<ReturnType<typeof findById>>, TError = unknown>(
 itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindById<TData = Awaited<ReturnType<typeof findById>>, TError = unknown>(
 itemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getFindByIdQueryOptions(itemId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindByIdSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof findById>>, TError = unknown>(itemId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByIdQueryKey(itemId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findById>>> = ({ signal }) => findById(itemId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof findById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type FindByIdSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof findById>>>
export type FindByIdSuspenseQueryError = unknown


export function useFindByIdSuspense<TData = Awaited<ReturnType<typeof findById>>, TError = unknown>(
 itemId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findById>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindByIdSuspense<TData = Awaited<ReturnType<typeof findById>>, TError = unknown>(
 itemId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findById>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindByIdSuspense<TData = Awaited<ReturnType<typeof findById>>, TError = unknown>(
 itemId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findById>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindByIdSuspense<TData = Awaited<ReturnType<typeof findById>>, TError = unknown>(
 itemId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findById>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getFindByIdSuspenseQueryOptions(itemId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



