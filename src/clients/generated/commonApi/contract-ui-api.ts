/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * order-manager
 * API order-manager
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  CreateContractRequest,
  UiContract,
  UiContracts
} from './models'
import { apiInstance } from '../../../shared/api/instance';
import type { BodyType } from '../../../shared/api/instance';




/**
 * –°–æ–∑–¥–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä
 */
export const createContract = (
    createContractRequest: BodyType<CreateContractRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiContract>(
      {url: `/api/v1/ui/contracts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createContractRequest, signal
    },
      );
    }
  


export const getCreateContractMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createContract>>, TError,{data: BodyType<CreateContractRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createContract>>, TError,{data: BodyType<CreateContractRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createContract>>, {data: BodyType<CreateContractRequest>}> = (props) => {
          const {data} = props ?? {};

          return  createContract(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateContractMutationResult = NonNullable<Awaited<ReturnType<typeof createContract>>>
    export type CreateContractMutationBody = BodyType<CreateContractRequest>
    export type CreateContractMutationError = unknown

    export const useCreateContract = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createContract>>, TError,{data: BodyType<CreateContractRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createContract>>,
        TError,
        {data: BodyType<CreateContractRequest>},
        TContext
      > => {

      const mutationOptions = getCreateContractMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ã –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
 */
export const getByCounterparty = (
    counterpartyId: string,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiContracts>(
      {url: `/api/v1/ui/contracts/${counterpartyId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetByCounterpartyQueryKey = (counterpartyId: string,) => {
    return [`/api/v1/ui/contracts/${counterpartyId}`] as const;
    }

    
export const getGetByCounterpartyQueryOptions = <TData = Awaited<ReturnType<typeof getByCounterparty>>, TError = unknown>(counterpartyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByCounterparty>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetByCounterpartyQueryKey(counterpartyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getByCounterparty>>> = ({ signal }) => getByCounterparty(counterpartyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(counterpartyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getByCounterparty>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetByCounterpartyQueryResult = NonNullable<Awaited<ReturnType<typeof getByCounterparty>>>
export type GetByCounterpartyQueryError = unknown


export function useGetByCounterparty<TData = Awaited<ReturnType<typeof getByCounterparty>>, TError = unknown>(
 counterpartyId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByCounterparty>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getByCounterparty>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetByCounterparty<TData = Awaited<ReturnType<typeof getByCounterparty>>, TError = unknown>(
 counterpartyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByCounterparty>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getByCounterparty>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetByCounterparty<TData = Awaited<ReturnType<typeof getByCounterparty>>, TError = unknown>(
 counterpartyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByCounterparty>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetByCounterparty<TData = Awaited<ReturnType<typeof getByCounterparty>>, TError = unknown>(
 counterpartyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByCounterparty>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetByCounterpartyQueryOptions(counterpartyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetByCounterpartySuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getByCounterparty>>, TError = unknown>(counterpartyId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getByCounterparty>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetByCounterpartyQueryKey(counterpartyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getByCounterparty>>> = ({ signal }) => getByCounterparty(counterpartyId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getByCounterparty>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetByCounterpartySuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getByCounterparty>>>
export type GetByCounterpartySuspenseQueryError = unknown


export function useGetByCounterpartySuspense<TData = Awaited<ReturnType<typeof getByCounterparty>>, TError = unknown>(
 counterpartyId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getByCounterparty>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetByCounterpartySuspense<TData = Awaited<ReturnType<typeof getByCounterparty>>, TError = unknown>(
 counterpartyId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getByCounterparty>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetByCounterpartySuspense<TData = Awaited<ReturnType<typeof getByCounterparty>>, TError = unknown>(
 counterpartyId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getByCounterparty>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetByCounterpartySuspense<TData = Awaited<ReturnType<typeof getByCounterparty>>, TError = unknown>(
 counterpartyId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getByCounterparty>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetByCounterpartySuspenseQueryOptions(counterpartyId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * –ü–æ–∏—Å–∫ –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ ID
 */
export const getContract = (
    contractId: string,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiContract>(
      {url: `/api/v1/ui/contracts/${contractId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetContractQueryKey = (contractId: string,) => {
    return [`/api/v1/ui/contracts/${contractId}`] as const;
    }

    
export const getGetContractQueryOptions = <TData = Awaited<ReturnType<typeof getContract>>, TError = unknown>(contractId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContractQueryKey(contractId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContract>>> = ({ signal }) => getContract(contractId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(contractId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetContractQueryResult = NonNullable<Awaited<ReturnType<typeof getContract>>>
export type GetContractQueryError = unknown


export function useGetContract<TData = Awaited<ReturnType<typeof getContract>>, TError = unknown>(
 contractId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContract>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetContract<TData = Awaited<ReturnType<typeof getContract>>, TError = unknown>(
 contractId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContract>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetContract<TData = Awaited<ReturnType<typeof getContract>>, TError = unknown>(
 contractId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetContract<TData = Awaited<ReturnType<typeof getContract>>, TError = unknown>(
 contractId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetContractQueryOptions(contractId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetContractSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getContract>>, TError = unknown>(contractId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContractQueryKey(contractId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContract>>> = ({ signal }) => getContract(contractId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetContractSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getContract>>>
export type GetContractSuspenseQueryError = unknown


export function useGetContractSuspense<TData = Awaited<ReturnType<typeof getContract>>, TError = unknown>(
 contractId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetContractSuspense<TData = Awaited<ReturnType<typeof getContract>>, TError = unknown>(
 contractId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetContractSuspense<TData = Awaited<ReturnType<typeof getContract>>, TError = unknown>(
 contractId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetContractSuspense<TData = Awaited<ReturnType<typeof getContract>>, TError = unknown>(
 contractId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetContractSuspenseQueryOptions(contractId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



