/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * order-manager
 * API order-manager
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  CreateTechnologistRequest,
  UiTechnologist,
  UpdateTechnologistRequest
} from './models'
import { apiInstance } from '../../../shared/api/instance';
import type { BodyType } from '../../../shared/api/instance';




/**
 * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∞.
 */
export const updateTechnologist = (
    updateTechnologistRequest: BodyType<UpdateTechnologistRequest>,
 ) => {
      
      
      return apiInstance<UiTechnologist>(
      {url: `/api/v1/ui/technologists`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateTechnologistRequest
    },
      );
    }
  


export const getUpdateTechnologistMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTechnologist>>, TError,{data: BodyType<UpdateTechnologistRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateTechnologist>>, TError,{data: BodyType<UpdateTechnologistRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTechnologist>>, {data: BodyType<UpdateTechnologistRequest>}> = (props) => {
          const {data} = props ?? {};

          return  updateTechnologist(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateTechnologistMutationResult = NonNullable<Awaited<ReturnType<typeof updateTechnologist>>>
    export type UpdateTechnologistMutationBody = BodyType<UpdateTechnologistRequest>
    export type UpdateTechnologistMutationError = unknown

    export const useUpdateTechnologist = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTechnologist>>, TError,{data: BodyType<UpdateTechnologistRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateTechnologist>>,
        TError,
        {data: BodyType<UpdateTechnologistRequest>},
        TContext
      > => {

      const mutationOptions = getUpdateTechnologistMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –°–æ–∑–∞–¥—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∞.
 */
export const createTechnologist = (
    createTechnologistRequest: BodyType<CreateTechnologistRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiTechnologist>(
      {url: `/api/v1/ui/technologists`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createTechnologistRequest, signal
    },
      );
    }
  


export const getCreateTechnologistMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTechnologist>>, TError,{data: BodyType<CreateTechnologistRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createTechnologist>>, TError,{data: BodyType<CreateTechnologistRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTechnologist>>, {data: BodyType<CreateTechnologistRequest>}> = (props) => {
          const {data} = props ?? {};

          return  createTechnologist(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTechnologistMutationResult = NonNullable<Awaited<ReturnType<typeof createTechnologist>>>
    export type CreateTechnologistMutationBody = BodyType<CreateTechnologistRequest>
    export type CreateTechnologistMutationError = unknown

    export const useCreateTechnologist = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTechnologist>>, TError,{data: BodyType<CreateTechnologistRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createTechnologist>>,
        TError,
        {data: BodyType<CreateTechnologistRequest>},
        TContext
      > => {

      const mutationOptions = getCreateTechnologistMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–µ.
 */
export const getTechnologist = (
    technologistId: string,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiTechnologist>(
      {url: `/api/v1/ui/technologists/${technologistId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTechnologistQueryKey = (technologistId: string,) => {
    return [`/api/v1/ui/technologists/${technologistId}`] as const;
    }

    
export const getGetTechnologistQueryOptions = <TData = Awaited<ReturnType<typeof getTechnologist>>, TError = unknown>(technologistId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTechnologist>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTechnologistQueryKey(technologistId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTechnologist>>> = ({ signal }) => getTechnologist(technologistId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(technologistId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTechnologist>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTechnologistQueryResult = NonNullable<Awaited<ReturnType<typeof getTechnologist>>>
export type GetTechnologistQueryError = unknown


export function useGetTechnologist<TData = Awaited<ReturnType<typeof getTechnologist>>, TError = unknown>(
 technologistId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTechnologist>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTechnologist>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTechnologist<TData = Awaited<ReturnType<typeof getTechnologist>>, TError = unknown>(
 technologistId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTechnologist>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTechnologist>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTechnologist<TData = Awaited<ReturnType<typeof getTechnologist>>, TError = unknown>(
 technologistId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTechnologist>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetTechnologist<TData = Awaited<ReturnType<typeof getTechnologist>>, TError = unknown>(
 technologistId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTechnologist>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTechnologistQueryOptions(technologistId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetTechnologistSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getTechnologist>>, TError = unknown>(technologistId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTechnologist>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTechnologistQueryKey(technologistId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTechnologist>>> = ({ signal }) => getTechnologist(technologistId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTechnologist>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTechnologistSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getTechnologist>>>
export type GetTechnologistSuspenseQueryError = unknown


export function useGetTechnologistSuspense<TData = Awaited<ReturnType<typeof getTechnologist>>, TError = unknown>(
 technologistId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTechnologist>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTechnologistSuspense<TData = Awaited<ReturnType<typeof getTechnologist>>, TError = unknown>(
 technologistId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTechnologist>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTechnologistSuspense<TData = Awaited<ReturnType<typeof getTechnologist>>, TError = unknown>(
 technologistId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTechnologist>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetTechnologistSuspense<TData = Awaited<ReturnType<typeof getTechnologist>>, TError = unknown>(
 technologistId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTechnologist>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTechnologistSuspenseQueryOptions(technologistId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * –£–¥–∞–ª–∏—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∞.
 */
export const deleteTechnologist = (
    technologistId: string,
 ) => {
      
      
      return apiInstance<void>(
      {url: `/api/v1/ui/technologists/${technologistId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteTechnologistMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTechnologist>>, TError,{technologistId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteTechnologist>>, TError,{technologistId: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTechnologist>>, {technologistId: string}> = (props) => {
          const {technologistId} = props ?? {};

          return  deleteTechnologist(technologistId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTechnologistMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTechnologist>>>
    
    export type DeleteTechnologistMutationError = unknown

    export const useDeleteTechnologist = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTechnologist>>, TError,{technologistId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTechnologist>>,
        TError,
        {technologistId: string},
        TContext
      > => {

      const mutationOptions = getDeleteTechnologistMutationOptions(options);

      return useMutation(mutationOptions);
    }
    