/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * order-manager
 * API order-manager
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  CreateTaskRequest,
  TaskCompletedRequest,
  UiTask,
  UpdateTaskRequest
} from './models'
import { apiInstance } from '../../../shared/api/instance';
import type { BodyType } from '../../../shared/api/instance';




/**
 * Изменить признак завершения задачи
 */
export const complectedTask = (
    taskCompletedRequest: BodyType<TaskCompletedRequest>,
 ) => {
      
      
      return apiInstance<UiTask>(
      {url: `/api/v1/ui/tasks`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: taskCompletedRequest
    },
      );
    }
  


export const getComplectedTaskMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof complectedTask>>, TError,{data: BodyType<TaskCompletedRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof complectedTask>>, TError,{data: BodyType<TaskCompletedRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof complectedTask>>, {data: BodyType<TaskCompletedRequest>}> = (props) => {
          const {data} = props ?? {};

          return  complectedTask(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ComplectedTaskMutationResult = NonNullable<Awaited<ReturnType<typeof complectedTask>>>
    export type ComplectedTaskMutationBody = BodyType<TaskCompletedRequest>
    export type ComplectedTaskMutationError = unknown

    export const useComplectedTask = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof complectedTask>>, TError,{data: BodyType<TaskCompletedRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof complectedTask>>,
        TError,
        {data: BodyType<TaskCompletedRequest>},
        TContext
      > => {

      const mutationOptions = getComplectedTaskMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Добавить задачу к заказу
 */
export const addTask = (
    createTaskRequest: BodyType<CreateTaskRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiTask>(
      {url: `/api/v1/ui/tasks`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createTaskRequest, signal
    },
      );
    }
  


export const getAddTaskMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addTask>>, TError,{data: BodyType<CreateTaskRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof addTask>>, TError,{data: BodyType<CreateTaskRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addTask>>, {data: BodyType<CreateTaskRequest>}> = (props) => {
          const {data} = props ?? {};

          return  addTask(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddTaskMutationResult = NonNullable<Awaited<ReturnType<typeof addTask>>>
    export type AddTaskMutationBody = BodyType<CreateTaskRequest>
    export type AddTaskMutationError = unknown

    export const useAddTask = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addTask>>, TError,{data: BodyType<CreateTaskRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof addTask>>,
        TError,
        {data: BodyType<CreateTaskRequest>},
        TContext
      > => {

      const mutationOptions = getAddTaskMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Изменить опесание заказа
 */
export const updateTask = (
    updateTaskRequest: BodyType<UpdateTaskRequest>,
 ) => {
      
      
      return apiInstance<UiTask>(
      {url: `/api/v1/ui/tasks`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateTaskRequest
    },
      );
    }
  


export const getUpdateTaskMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTask>>, TError,{data: BodyType<UpdateTaskRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateTask>>, TError,{data: BodyType<UpdateTaskRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTask>>, {data: BodyType<UpdateTaskRequest>}> = (props) => {
          const {data} = props ?? {};

          return  updateTask(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateTaskMutationResult = NonNullable<Awaited<ReturnType<typeof updateTask>>>
    export type UpdateTaskMutationBody = BodyType<UpdateTaskRequest>
    export type UpdateTaskMutationError = unknown

    export const useUpdateTask = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTask>>, TError,{data: BodyType<UpdateTaskRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateTask>>,
        TError,
        {data: BodyType<UpdateTaskRequest>},
        TContext
      > => {

      const mutationOptions = getUpdateTaskMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Получить задачу по ID
 */
export const getTask = (
    taskId: string,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiTask>(
      {url: `/api/v1/ui/tasks/${taskId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTaskQueryKey = (taskId: string,) => {
    return [`/api/v1/ui/tasks/${taskId}`] as const;
    }

    
export const getGetTaskQueryOptions = <TData = Awaited<ReturnType<typeof getTask>>, TError = unknown>(taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTaskQueryKey(taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTask>>> = ({ signal }) => getTask(taskId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTaskQueryResult = NonNullable<Awaited<ReturnType<typeof getTask>>>
export type GetTaskQueryError = unknown


export function useGetTask<TData = Awaited<ReturnType<typeof getTask>>, TError = unknown>(
 taskId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTask>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTask<TData = Awaited<ReturnType<typeof getTask>>, TError = unknown>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTask>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTask<TData = Awaited<ReturnType<typeof getTask>>, TError = unknown>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetTask<TData = Awaited<ReturnType<typeof getTask>>, TError = unknown>(
 taskId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTaskQueryOptions(taskId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetTaskSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getTask>>, TError = unknown>(taskId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTaskQueryKey(taskId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTask>>> = ({ signal }) => getTask(taskId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTaskSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getTask>>>
export type GetTaskSuspenseQueryError = unknown


export function useGetTaskSuspense<TData = Awaited<ReturnType<typeof getTask>>, TError = unknown>(
 taskId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTaskSuspense<TData = Awaited<ReturnType<typeof getTask>>, TError = unknown>(
 taskId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTaskSuspense<TData = Awaited<ReturnType<typeof getTask>>, TError = unknown>(
 taskId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetTaskSuspense<TData = Awaited<ReturnType<typeof getTask>>, TError = unknown>(
 taskId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTask>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTaskSuspenseQueryOptions(taskId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Удалить задачу по ID
 */
export const deleteTask = (
    taskId: string,
 ) => {
      
      
      return apiInstance<void>(
      {url: `/api/v1/ui/tasks/${taskId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteTaskMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTask>>, TError,{taskId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteTask>>, TError,{taskId: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTask>>, {taskId: string}> = (props) => {
          const {taskId} = props ?? {};

          return  deleteTask(taskId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTaskMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTask>>>
    
    export type DeleteTaskMutationError = unknown

    export const useDeleteTask = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTask>>, TError,{taskId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTask>>,
        TError,
        {taskId: string},
        TContext
      > => {

      const mutationOptions = getDeleteTaskMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Получить задачи по заказу
 */
export const getTasksByOrderId = (
    orderId: string,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiTask[]>(
      {url: `/api/v1/ui/tasks/order/${orderId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetTasksByOrderIdQueryKey = (orderId: string,) => {
    return [`/api/v1/ui/tasks/order/${orderId}`] as const;
    }

    
export const getGetTasksByOrderIdQueryOptions = <TData = Awaited<ReturnType<typeof getTasksByOrderId>>, TError = unknown>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTasksByOrderId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTasksByOrderIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTasksByOrderId>>> = ({ signal }) => getTasksByOrderId(orderId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTasksByOrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTasksByOrderIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTasksByOrderId>>>
export type GetTasksByOrderIdQueryError = unknown


export function useGetTasksByOrderId<TData = Awaited<ReturnType<typeof getTasksByOrderId>>, TError = unknown>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTasksByOrderId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTasksByOrderId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTasksByOrderId<TData = Awaited<ReturnType<typeof getTasksByOrderId>>, TError = unknown>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTasksByOrderId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTasksByOrderId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTasksByOrderId<TData = Awaited<ReturnType<typeof getTasksByOrderId>>, TError = unknown>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTasksByOrderId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetTasksByOrderId<TData = Awaited<ReturnType<typeof getTasksByOrderId>>, TError = unknown>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTasksByOrderId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTasksByOrderIdQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetTasksByOrderIdSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getTasksByOrderId>>, TError = unknown>(orderId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTasksByOrderId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTasksByOrderIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTasksByOrderId>>> = ({ signal }) => getTasksByOrderId(orderId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTasksByOrderId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetTasksByOrderIdSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getTasksByOrderId>>>
export type GetTasksByOrderIdSuspenseQueryError = unknown


export function useGetTasksByOrderIdSuspense<TData = Awaited<ReturnType<typeof getTasksByOrderId>>, TError = unknown>(
 orderId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTasksByOrderId>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTasksByOrderIdSuspense<TData = Awaited<ReturnType<typeof getTasksByOrderId>>, TError = unknown>(
 orderId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTasksByOrderId>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetTasksByOrderIdSuspense<TData = Awaited<ReturnType<typeof getTasksByOrderId>>, TError = unknown>(
 orderId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTasksByOrderId>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetTasksByOrderIdSuspense<TData = Awaited<ReturnType<typeof getTasksByOrderId>>, TError = unknown>(
 orderId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTasksByOrderId>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetTasksByOrderIdSuspenseQueryOptions(orderId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



