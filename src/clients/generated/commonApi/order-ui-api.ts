/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * order-manager
 * API order-manager
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  ChangeOrderSateParams,
  CreateOrderRequest,
  PageRequest,
  PageUiOrder,
  PageUiOrderShort,
  UiOrder,
  UpdateOrderRequest
} from './models'
import { apiInstance } from '../../../shared/api/instance';
import type { BodyType } from '../../../shared/api/instance';




/**
 * Обновить инофрмацию о заказе
 */
export const updateOrder = (
    updateOrderRequest: BodyType<UpdateOrderRequest>,
 ) => {
      
      
      return apiInstance<UiOrder>(
      {url: `/api/v1/ui/orders`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateOrderRequest
    },
      );
    }
  


export const getUpdateOrderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrder>>, TError,{data: BodyType<UpdateOrderRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateOrder>>, TError,{data: BodyType<UpdateOrderRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOrder>>, {data: BodyType<UpdateOrderRequest>}> = (props) => {
          const {data} = props ?? {};

          return  updateOrder(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateOrderMutationResult = NonNullable<Awaited<ReturnType<typeof updateOrder>>>
    export type UpdateOrderMutationBody = BodyType<UpdateOrderRequest>
    export type UpdateOrderMutationError = unknown

    export const useUpdateOrder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrder>>, TError,{data: BodyType<UpdateOrderRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateOrder>>,
        TError,
        {data: BodyType<UpdateOrderRequest>},
        TContext
      > => {

      const mutationOptions = getUpdateOrderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Создание заказа.
 */
export const createOrder = (
    createOrderRequest: BodyType<CreateOrderRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiOrder>(
      {url: `/api/v1/ui/orders`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOrderRequest, signal
    },
      );
    }
  


export const getCreateOrderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrder>>, TError,{data: BodyType<CreateOrderRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createOrder>>, TError,{data: BodyType<CreateOrderRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrder>>, {data: BodyType<CreateOrderRequest>}> = (props) => {
          const {data} = props ?? {};

          return  createOrder(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOrderMutationResult = NonNullable<Awaited<ReturnType<typeof createOrder>>>
    export type CreateOrderMutationBody = BodyType<CreateOrderRequest>
    export type CreateOrderMutationError = unknown

    export const useCreateOrder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrder>>, TError,{data: BodyType<CreateOrderRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createOrder>>,
        TError,
        {data: BodyType<CreateOrderRequest>},
        TContext
      > => {

      const mutationOptions = getCreateOrderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Получить заказ по id
 */
export const getOrderById = (
    orderId: string,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiOrder>(
      {url: `/api/v1/ui/orders/${orderId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetOrderByIdQueryKey = (orderId: string,) => {
    return [`/api/v1/ui/orders/${orderId}`] as const;
    }

    
export const getGetOrderByIdQueryOptions = <TData = Awaited<ReturnType<typeof getOrderById>>, TError = unknown>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderByIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderById>>> = ({ signal }) => getOrderById(orderId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderById>>>
export type GetOrderByIdQueryError = unknown


export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = unknown>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = unknown>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrderById>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = unknown>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = unknown>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderByIdQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetOrderByIdSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getOrderById>>, TError = unknown>(orderId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderByIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderById>>> = ({ signal }) => getOrderById(orderId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrderByIdSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderById>>>
export type GetOrderByIdSuspenseQueryError = unknown


export function useGetOrderByIdSuspense<TData = Awaited<ReturnType<typeof getOrderById>>, TError = unknown>(
 orderId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderByIdSuspense<TData = Awaited<ReturnType<typeof getOrderById>>, TError = unknown>(
 orderId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrderByIdSuspense<TData = Awaited<ReturnType<typeof getOrderById>>, TError = unknown>(
 orderId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetOrderByIdSuspense<TData = Awaited<ReturnType<typeof getOrderById>>, TError = unknown>(
 orderId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrderByIdSuspenseQueryOptions(orderId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Изменить позицию заказа
 */
export const changeOrderSate = (
    orderId: string,
    params: ChangeOrderSateParams,
 ) => {
      
      
      return apiInstance<UiOrder>(
      {url: `/api/v1/ui/orders/${orderId}`, method: 'PUT',
        params
    },
      );
    }
  


export const getChangeOrderSateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeOrderSate>>, TError,{orderId: string;params: ChangeOrderSateParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof changeOrderSate>>, TError,{orderId: string;params: ChangeOrderSateParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeOrderSate>>, {orderId: string;params: ChangeOrderSateParams}> = (props) => {
          const {orderId,params} = props ?? {};

          return  changeOrderSate(orderId,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangeOrderSateMutationResult = NonNullable<Awaited<ReturnType<typeof changeOrderSate>>>
    
    export type ChangeOrderSateMutationError = unknown

    export const useChangeOrderSate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeOrderSate>>, TError,{orderId: string;params: ChangeOrderSateParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof changeOrderSate>>,
        TError,
        {orderId: string;params: ChangeOrderSateParams},
        TContext
      > => {

      const mutationOptions = getChangeOrderSateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Удаление заказа по id
 */
export const deleteOrder = (
    orderId: string,
 ) => {
      
      
      return apiInstance<void>(
      {url: `/api/v1/ui/orders/${orderId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteOrderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrder>>, TError,{orderId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrder>>, TError,{orderId: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrder>>, {orderId: string}> = (props) => {
          const {orderId} = props ?? {};

          return  deleteOrder(orderId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrderMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrder>>>
    
    export type DeleteOrderMutationError = unknown

    export const useDeleteOrder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrder>>, TError,{orderId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrder>>,
        TError,
        {orderId: string},
        TContext
      > => {

      const mutationOptions = getDeleteOrderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Получиение всех заказав по Контрегенту
 */
export const getAllOrdersByCounterparty = (
    counterpartyId: string,
    pageRequest: BodyType<PageRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<PageUiOrder>(
      {url: `/api/v1/ui/orders/${counterpartyId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pageRequest, signal
    },
      );
    }
  


export const getGetAllOrdersByCounterpartyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getAllOrdersByCounterparty>>, TError,{counterpartyId: string;data: BodyType<PageRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof getAllOrdersByCounterparty>>, TError,{counterpartyId: string;data: BodyType<PageRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getAllOrdersByCounterparty>>, {counterpartyId: string;data: BodyType<PageRequest>}> = (props) => {
          const {counterpartyId,data} = props ?? {};

          return  getAllOrdersByCounterparty(counterpartyId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetAllOrdersByCounterpartyMutationResult = NonNullable<Awaited<ReturnType<typeof getAllOrdersByCounterparty>>>
    export type GetAllOrdersByCounterpartyMutationBody = BodyType<PageRequest>
    export type GetAllOrdersByCounterpartyMutationError = unknown

    export const useGetAllOrdersByCounterparty = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getAllOrdersByCounterparty>>, TError,{counterpartyId: string;data: BodyType<PageRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof getAllOrdersByCounterparty>>,
        TError,
        {counterpartyId: string;data: BodyType<PageRequest>},
        TContext
      > => {

      const mutationOptions = getGetAllOrdersByCounterpartyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Получение страницы заказов
 */
export const getOrdersPage = (
    pageRequest: BodyType<PageRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<PageUiOrderShort>(
      {url: `/api/v1/ui/orders/page`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pageRequest, signal
    },
      );
    }
  


export const getGetOrdersPageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getOrdersPage>>, TError,{data: BodyType<PageRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof getOrdersPage>>, TError,{data: BodyType<PageRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getOrdersPage>>, {data: BodyType<PageRequest>}> = (props) => {
          const {data} = props ?? {};

          return  getOrdersPage(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetOrdersPageMutationResult = NonNullable<Awaited<ReturnType<typeof getOrdersPage>>>
    export type GetOrdersPageMutationBody = BodyType<PageRequest>
    export type GetOrdersPageMutationError = unknown

    export const useGetOrdersPage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getOrdersPage>>, TError,{data: BodyType<PageRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof getOrdersPage>>,
        TError,
        {data: BodyType<PageRequest>},
        TContext
      > => {

      const mutationOptions = getGetOrdersPageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    