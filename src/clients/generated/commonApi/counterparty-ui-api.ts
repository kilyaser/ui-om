/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * order-manager
 * API order-manager
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  CreateCounterpartyRequest,
  FilterRequest,
  PageRequest,
  PageUiCounterpartyShort,
  UiCounterparty,
  UpdateCounterpartyRequest
} from './models'
import { apiInstance } from '../../../shared/api/instance';
import type { BodyType } from '../../../shared/api/instance';




/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–µ
 */
export const updateCounterparty = (
    updateCounterpartyRequest: BodyType<UpdateCounterpartyRequest>,
 ) => {
      
      
      return apiInstance<UiCounterparty>(
      {url: `/api/v1/ui/counterparties`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCounterpartyRequest
    },
      );
    }
  


export const getUpdateCounterpartyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCounterparty>>, TError,{data: BodyType<UpdateCounterpartyRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateCounterparty>>, TError,{data: BodyType<UpdateCounterpartyRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCounterparty>>, {data: BodyType<UpdateCounterpartyRequest>}> = (props) => {
          const {data} = props ?? {};

          return  updateCounterparty(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCounterpartyMutationResult = NonNullable<Awaited<ReturnType<typeof updateCounterparty>>>
    export type UpdateCounterpartyMutationBody = BodyType<UpdateCounterpartyRequest>
    export type UpdateCounterpartyMutationError = unknown

    export const useUpdateCounterparty = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCounterparty>>, TError,{data: BodyType<UpdateCounterpartyRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateCounterparty>>,
        TError,
        {data: BodyType<UpdateCounterpartyRequest>},
        TContext
      > => {

      const mutationOptions = getUpdateCounterpartyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
 */
export const createCounterparty = (
    createCounterpartyRequest: BodyType<CreateCounterpartyRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiCounterparty>(
      {url: `/api/v1/ui/counterparties`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCounterpartyRequest, signal
    },
      );
    }
  


export const getCreateCounterpartyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCounterparty>>, TError,{data: BodyType<CreateCounterpartyRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createCounterparty>>, TError,{data: BodyType<CreateCounterpartyRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCounterparty>>, {data: BodyType<CreateCounterpartyRequest>}> = (props) => {
          const {data} = props ?? {};

          return  createCounterparty(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCounterpartyMutationResult = NonNullable<Awaited<ReturnType<typeof createCounterparty>>>
    export type CreateCounterpartyMutationBody = BodyType<CreateCounterpartyRequest>
    export type CreateCounterpartyMutationError = unknown

    export const useCreateCounterparty = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCounterparty>>, TError,{data: BodyType<CreateCounterpartyRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createCounterparty>>,
        TError,
        {data: BodyType<CreateCounterpartyRequest>},
        TContext
      > => {

      const mutationOptions = getCreateCounterpartyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
 */
export const getCounterpartyPage = (
    pageRequest: BodyType<PageRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<PageUiCounterpartyShort>(
      {url: `/api/v1/ui/counterparties/page`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pageRequest, signal
    },
      );
    }
  


export const getGetCounterpartyPageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getCounterpartyPage>>, TError,{data: BodyType<PageRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof getCounterpartyPage>>, TError,{data: BodyType<PageRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getCounterpartyPage>>, {data: BodyType<PageRequest>}> = (props) => {
          const {data} = props ?? {};

          return  getCounterpartyPage(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetCounterpartyPageMutationResult = NonNullable<Awaited<ReturnType<typeof getCounterpartyPage>>>
    export type GetCounterpartyPageMutationBody = BodyType<PageRequest>
    export type GetCounterpartyPageMutationError = unknown

    export const useGetCounterpartyPage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getCounterpartyPage>>, TError,{data: BodyType<PageRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof getCounterpartyPage>>,
        TError,
        {data: BodyType<PageRequest>},
        TContext
      > => {

      const mutationOptions = getGetCounterpartyPageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é
 */
export const findCounterpartyByFilter = (
    filterRequest: BodyType<FilterRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<PageUiCounterpartyShort>(
      {url: `/api/v1/ui/counterparties/find`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterRequest, signal
    },
      );
    }
  


export const getFindCounterpartyByFilterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof findCounterpartyByFilter>>, TError,{data: BodyType<FilterRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof findCounterpartyByFilter>>, TError,{data: BodyType<FilterRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof findCounterpartyByFilter>>, {data: BodyType<FilterRequest>}> = (props) => {
          const {data} = props ?? {};

          return  findCounterpartyByFilter(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FindCounterpartyByFilterMutationResult = NonNullable<Awaited<ReturnType<typeof findCounterpartyByFilter>>>
    export type FindCounterpartyByFilterMutationBody = BodyType<FilterRequest>
    export type FindCounterpartyByFilterMutationError = unknown

    export const useFindCounterpartyByFilter = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof findCounterpartyByFilter>>, TError,{data: BodyType<FilterRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof findCounterpartyByFilter>>,
        TError,
        {data: BodyType<FilterRequest>},
        TContext
      > => {

      const mutationOptions = getFindCounterpartyByFilterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –ø–æ id
 */
export const getCounterparty = (
    counterpartyId: string,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiCounterparty>(
      {url: `/api/v1/ui/counterparties/${counterpartyId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetCounterpartyQueryKey = (counterpartyId: string,) => {
    return [`/api/v1/ui/counterparties/${counterpartyId}`] as const;
    }

    
export const getGetCounterpartyQueryOptions = <TData = Awaited<ReturnType<typeof getCounterparty>>, TError = unknown>(counterpartyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCounterparty>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCounterpartyQueryKey(counterpartyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCounterparty>>> = ({ signal }) => getCounterparty(counterpartyId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(counterpartyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCounterparty>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCounterpartyQueryResult = NonNullable<Awaited<ReturnType<typeof getCounterparty>>>
export type GetCounterpartyQueryError = unknown


export function useGetCounterparty<TData = Awaited<ReturnType<typeof getCounterparty>>, TError = unknown>(
 counterpartyId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCounterparty>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCounterparty>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCounterparty<TData = Awaited<ReturnType<typeof getCounterparty>>, TError = unknown>(
 counterpartyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCounterparty>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCounterparty>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCounterparty<TData = Awaited<ReturnType<typeof getCounterparty>>, TError = unknown>(
 counterpartyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCounterparty>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetCounterparty<TData = Awaited<ReturnType<typeof getCounterparty>>, TError = unknown>(
 counterpartyId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCounterparty>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCounterpartyQueryOptions(counterpartyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetCounterpartySuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getCounterparty>>, TError = unknown>(counterpartyId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getCounterparty>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCounterpartyQueryKey(counterpartyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCounterparty>>> = ({ signal }) => getCounterparty(counterpartyId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getCounterparty>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCounterpartySuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getCounterparty>>>
export type GetCounterpartySuspenseQueryError = unknown


export function useGetCounterpartySuspense<TData = Awaited<ReturnType<typeof getCounterparty>>, TError = unknown>(
 counterpartyId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getCounterparty>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCounterpartySuspense<TData = Awaited<ReturnType<typeof getCounterparty>>, TError = unknown>(
 counterpartyId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getCounterparty>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCounterpartySuspense<TData = Awaited<ReturnType<typeof getCounterparty>>, TError = unknown>(
 counterpartyId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getCounterparty>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetCounterpartySuspense<TData = Awaited<ReturnType<typeof getCounterparty>>, TError = unknown>(
 counterpartyId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getCounterparty>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCounterpartySuspenseQueryOptions(counterpartyId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
 */
export const deleteCounterparty = (
    counterpartyId: string,
 ) => {
      
      
      return apiInstance<void>(
      {url: `/api/v1/ui/counterparties/${counterpartyId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteCounterpartyMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCounterparty>>, TError,{counterpartyId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteCounterparty>>, TError,{counterpartyId: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCounterparty>>, {counterpartyId: string}> = (props) => {
          const {counterpartyId} = props ?? {};

          return  deleteCounterparty(counterpartyId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCounterpartyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCounterparty>>>
    
    export type DeleteCounterpartyMutationError = unknown

    export const useDeleteCounterparty = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCounterparty>>, TError,{counterpartyId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteCounterparty>>,
        TError,
        {counterpartyId: string},
        TContext
      > => {

      const mutationOptions = getDeleteCounterpartyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    