/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * order-manager
 * API order-manager
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  AdminConstraint
} from './models'
import { apiInstance } from '../../../shared/api/instance';




/**
 * Получить информацию об ограничениях.
 */
export const getConstraints1 = (
    
 signal?: AbortSignal
) => {
      
      
      return apiInstance<AdminConstraint>(
      {url: `/api/v1/ui/admin/constraints`, method: 'GET', signal
    },
      );
    }
  

export const getGetConstraints1QueryKey = () => {
    return [`/api/v1/ui/admin/constraints`] as const;
    }

    
export const getGetConstraints1QueryOptions = <TData = Awaited<ReturnType<typeof getConstraints1>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConstraints1>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConstraints1QueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConstraints1>>> = ({ signal }) => getConstraints1(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getConstraints1>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetConstraints1QueryResult = NonNullable<Awaited<ReturnType<typeof getConstraints1>>>
export type GetConstraints1QueryError = unknown


export function useGetConstraints1<TData = Awaited<ReturnType<typeof getConstraints1>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConstraints1>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConstraints1>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetConstraints1<TData = Awaited<ReturnType<typeof getConstraints1>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConstraints1>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getConstraints1>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetConstraints1<TData = Awaited<ReturnType<typeof getConstraints1>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConstraints1>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetConstraints1<TData = Awaited<ReturnType<typeof getConstraints1>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getConstraints1>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetConstraints1QueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetConstraints1SuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getConstraints1>>, TError = unknown>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getConstraints1>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConstraints1QueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConstraints1>>> = ({ signal }) => getConstraints1(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getConstraints1>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetConstraints1SuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getConstraints1>>>
export type GetConstraints1SuspenseQueryError = unknown


export function useGetConstraints1Suspense<TData = Awaited<ReturnType<typeof getConstraints1>>, TError = unknown>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getConstraints1>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetConstraints1Suspense<TData = Awaited<ReturnType<typeof getConstraints1>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getConstraints1>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetConstraints1Suspense<TData = Awaited<ReturnType<typeof getConstraints1>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getConstraints1>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetConstraints1Suspense<TData = Awaited<ReturnType<typeof getConstraints1>>, TError = unknown>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getConstraints1>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetConstraints1SuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



