/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * order-manager
 * API order-manager
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  CreateProductRequest,
  FilterRequest,
  PageRequest,
  PageUiProduct,
  SearchRequest,
  UiProduct,
  UiProducts,
  UpdateProductRequest
} from './models'
import { apiInstance } from '../../../shared/api/instance';
import type { BodyType } from '../../../shared/api/instance';




/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑–¥–µ–ª–∏—è
 */
export const updateProduct = (
    updateProductRequest: BodyType<UpdateProductRequest>,
 ) => {
      
      
      return apiInstance<UiProduct>(
      {url: `/api/v1/ui/products`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateProductRequest
    },
      );
    }
  


export const getUpdateProductMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProduct>>, TError,{data: BodyType<UpdateProductRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateProduct>>, TError,{data: BodyType<UpdateProductRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateProduct>>, {data: BodyType<UpdateProductRequest>}> = (props) => {
          const {data} = props ?? {};

          return  updateProduct(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateProductMutationResult = NonNullable<Awaited<ReturnType<typeof updateProduct>>>
    export type UpdateProductMutationBody = BodyType<UpdateProductRequest>
    export type UpdateProductMutationError = unknown

    export const useUpdateProduct = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProduct>>, TError,{data: BodyType<UpdateProductRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateProduct>>,
        TError,
        {data: BodyType<UpdateProductRequest>},
        TContext
      > => {

      const mutationOptions = getUpdateProductMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –°–æ–∑–¥–∞—Ç—å –∏–∑–¥–µ–ª–∏–µ.
 */
export const createProduct = (
    createProductRequest: BodyType<CreateProductRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiProduct>(
      {url: `/api/v1/ui/products`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProductRequest, signal
    },
      );
    }
  


export const getCreateProductMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProduct>>, TError,{data: BodyType<CreateProductRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createProduct>>, TError,{data: BodyType<CreateProductRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createProduct>>, {data: BodyType<CreateProductRequest>}> = (props) => {
          const {data} = props ?? {};

          return  createProduct(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateProductMutationResult = NonNullable<Awaited<ReturnType<typeof createProduct>>>
    export type CreateProductMutationBody = BodyType<CreateProductRequest>
    export type CreateProductMutationError = unknown

    export const useCreateProduct = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProduct>>, TError,{data: BodyType<CreateProductRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createProduct>>,
        TError,
        {data: BodyType<CreateProductRequest>},
        TContext
      > => {

      const mutationOptions = getCreateProductMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –ü–æ–∏—Å–∫ –∏–∑–¥–µ–ª–∏–π –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é
 */
export const searchProducts = (
    searchRequest: BodyType<SearchRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiProducts>(
      {url: `/api/v1/ui/products/search`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchRequest, signal
    },
      );
    }
  


export const getSearchProductsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof searchProducts>>, TError,{data: BodyType<SearchRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof searchProducts>>, TError,{data: BodyType<SearchRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof searchProducts>>, {data: BodyType<SearchRequest>}> = (props) => {
          const {data} = props ?? {};

          return  searchProducts(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SearchProductsMutationResult = NonNullable<Awaited<ReturnType<typeof searchProducts>>>
    export type SearchProductsMutationBody = BodyType<SearchRequest>
    export type SearchProductsMutationError = unknown

    export const useSearchProducts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof searchProducts>>, TError,{data: BodyType<SearchRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof searchProducts>>,
        TError,
        {data: BodyType<SearchRequest>},
        TContext
      > => {

      const mutationOptions = getSearchProductsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑–¥–µ–ª–Ω–∏–π
 */
export const getProductPage = (
    pageRequest: BodyType<PageRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<PageUiProduct>(
      {url: `/api/v1/ui/products/page`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pageRequest, signal
    },
      );
    }
  


export const getGetProductPageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getProductPage>>, TError,{data: BodyType<PageRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof getProductPage>>, TError,{data: BodyType<PageRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getProductPage>>, {data: BodyType<PageRequest>}> = (props) => {
          const {data} = props ?? {};

          return  getProductPage(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetProductPageMutationResult = NonNullable<Awaited<ReturnType<typeof getProductPage>>>
    export type GetProductPageMutationBody = BodyType<PageRequest>
    export type GetProductPageMutationError = unknown

    export const useGetProductPage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getProductPage>>, TError,{data: BodyType<PageRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof getProductPage>>,
        TError,
        {data: BodyType<PageRequest>},
        TContext
      > => {

      const mutationOptions = getGetProductPageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –ü–æ–∏—Å–∫ –∏–∑–¥–µ–ª–∏–π –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
export const findProductByFilter = (
    filterRequest: BodyType<FilterRequest>,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<PageUiProduct>(
      {url: `/api/v1/ui/products/find`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: filterRequest, signal
    },
      );
    }
  


export const getFindProductByFilterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof findProductByFilter>>, TError,{data: BodyType<FilterRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof findProductByFilter>>, TError,{data: BodyType<FilterRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof findProductByFilter>>, {data: BodyType<FilterRequest>}> = (props) => {
          const {data} = props ?? {};

          return  findProductByFilter(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type FindProductByFilterMutationResult = NonNullable<Awaited<ReturnType<typeof findProductByFilter>>>
    export type FindProductByFilterMutationBody = BodyType<FilterRequest>
    export type FindProductByFilterMutationError = unknown

    export const useFindProductByFilter = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof findProductByFilter>>, TError,{data: BodyType<FilterRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof findProductByFilter>>,
        TError,
        {data: BodyType<FilterRequest>},
        TContext
      > => {

      const mutationOptions = getFindProductByFilterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–¥–µ–ª–∏–∏.
 */
export const getProduct = (
    productId: string,
 signal?: AbortSignal
) => {
      
      
      return apiInstance<UiProduct>(
      {url: `/api/v1/ui/products/${productId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProductQueryKey = (productId: string,) => {
    return [`/api/v1/ui/products/${productId}`] as const;
    }

    
export const getGetProductQueryOptions = <TData = Awaited<ReturnType<typeof getProduct>>, TError = unknown>(productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductQueryKey(productId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProduct>>> = ({ signal }) => getProduct(productId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(productId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetProductQueryResult = NonNullable<Awaited<ReturnType<typeof getProduct>>>
export type GetProductQueryError = unknown


export function useGetProduct<TData = Awaited<ReturnType<typeof getProduct>>, TError = unknown>(
 productId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProduct>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProduct<TData = Awaited<ReturnType<typeof getProduct>>, TError = unknown>(
 productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProduct>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProduct<TData = Awaited<ReturnType<typeof getProduct>>, TError = unknown>(
 productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetProduct<TData = Awaited<ReturnType<typeof getProduct>>, TError = unknown>(
 productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetProductQueryOptions(productId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProductSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getProduct>>, TError = unknown>(productId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductQueryKey(productId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProduct>>> = ({ signal }) => getProduct(productId, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetProductSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getProduct>>>
export type GetProductSuspenseQueryError = unknown


export function useGetProductSuspense<TData = Awaited<ReturnType<typeof getProduct>>, TError = unknown>(
 productId: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductSuspense<TData = Awaited<ReturnType<typeof getProduct>>, TError = unknown>(
 productId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductSuspense<TData = Awaited<ReturnType<typeof getProduct>>, TError = unknown>(
 productId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetProductSuspense<TData = Awaited<ReturnType<typeof getProduct>>, TError = unknown>(
 productId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getProduct>>, TError, TData>>, }

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetProductSuspenseQueryOptions(productId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
 */
export const deleteProduct = (
    productId: string,
 ) => {
      
      
      return apiInstance<void>(
      {url: `/api/v1/ui/products/${productId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteProductMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProduct>>, TError,{productId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteProduct>>, TError,{productId: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProduct>>, {productId: string}> = (props) => {
          const {productId} = props ?? {};

          return  deleteProduct(productId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProduct>>>
    
    export type DeleteProductMutationError = unknown

    export const useDeleteProduct = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProduct>>, TError,{productId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteProduct>>,
        TError,
        {productId: string},
        TContext
      > => {

      const mutationOptions = getDeleteProductMutationOptions(options);

      return useMutation(mutationOptions);
    }
    